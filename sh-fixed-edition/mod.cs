using Reloaded.Hooks.ReloadedII.Interfaces;
using Reloaded.Mod.Interfaces;
using Reloaded.Memory;
using Reloaded.Memory.Interfaces;
using sh_fixed_edition.Template;
using sh_fixed_edition.Configuration;
using System;

namespace sh_fixed_edition
{
    /// <summary>
    /// Your mod logic goes here.
    /// </summary>
    public class Mod : ModBase // <= Do not Remove.
    {
        /// <summary>
        /// Provides access to the mod loader API.
        /// </summary>
        private readonly IModLoader _modLoader;

        /// <summary>
        /// Provides access to the Reloaded.Hooks API.
        /// </summary>
        /// <remarks>This is null if you remove dependency on Reloaded.SharedLib.Hooks in your mod.</remarks>
        private readonly IReloadedHooks? _hooks;

        /// <summary>
        /// Provides access to the Reloaded logger.
        /// </summary>
        private readonly ILogger _logger;

        /// <summary>
        /// Entry point into the mod, instance that created this class.
        /// </summary>
        private readonly IMod _owner;

        /// <summary>
        /// Provides access to this mod's configuration.
        /// </summary>
        private Config _configuration;

        /// <summary>
        /// The configuration of the currently executing mod.
        /// </summary>
        private readonly IModConfig _modConfig;

        public Mod(ModContext context)
        {
            _modLoader = context.ModLoader;
            _hooks = context.Hooks;
            _logger = context.Logger;
            _owner = context.Owner;
            _modConfig = context.ModConfig;
            _configuration = context.Configuration;


            // Unfrozen Title Screen
            /// Makes the title screen animation continuous instead of freezing after pressing START Button/ENTER Key.
            Config_TitleScr(_configuration.TitleScr);

            // Demo Gameplay
            /// Enables Demo Mode that is leftover in the Windows port of the game. GameCube and PlayStation ports contain Demo Gameplay by default.
            Config_DemoMode(_configuration.DemoMode);

            // Menu Prompt/Credits Text Size
            /// The text on the menu prompts and credits don't resize properly, causing them to be smaller at bigger screen resolutions.
            ////// !!! WIP !!!

            // Knuckles Cut-Off Line
            /// Knuckles gets cut-off by the screen fade.
            byte[] VoiceTimerRange_TSonic = {
                0xFF
            };
            Memory.Instance.SafeWrite(0x7443C8, VoiceTimerRange_TSonic);

            // Cheese on the Main Menu
            /// Cheese doesn't appear in the menu in every port. However, the PC port contains unused animations for his menu idling and lock-in pose.
            //////   !!! WIP !!!

            // Broken Env Map Lighting
            /// Environmental Maps don't get affected by stage lighting, making them still show and not blend in darker lightings.
            //////   !!! WIP !!!

            // Speed Formation Damage Stun Fix
            /// Fixes the Damage Stun on Speed Formation Characters (Sonic/Super, Shadow, Amy, Espio).
            /// Courtesy of AkoSiRyan for finding the fix originally!
            byte[] SpdDamJmp = {
                0xEB
            };
            Memory.Instance.SafeWrite(0x5CF2DD, SpdDamJmp);

            // Shadow's Black Tornado
            ///Shadow's tornado effect is single-sided, caused by an incorrect culling materials applied to the model.
            byte[] ShTornado = {
                0x14, 0xE8, 0xE3, 0xCA
            };
            Memory.Instance.SafeWrite(0x63FEC7, ShTornado);

            // Fade-Out Effects
            /// Unlike on consoles, Some effects don't fade-out on PC.
            //////   !!! WIP !!!

            // Signal Monitor Flickering
            /// Flickering animation present in GC/XB ports that is missing on PC.
            byte[] SignalFlick1 = {
                0xA1, 0xE4, 0x77, 0xA7, 0x00, 0x83, 0xEC, 0x10, 0x57, 0x8B, 0xF9, 0x8A, 0x48, 0x20, 0x84, 0xC9,
                0x0F, 0x85, 0xF4, 0x00, 0x00, 0x00, 0x55, 0x8B, 0x68, 0x30, 0x8D, 0x87, 0xBC, 0x00, 0x00, 0x00,
                0x8B, 0x08, 0x8B, 0x50, 0x04, 0x8B, 0x40, 0x08, 0x89, 0x4C, 0x24, 0x08, 0x8B, 0x0D, 0x4C, 0x0A,
                0x8E, 0x00, 0x89, 0x54, 0x24, 0x0C, 0x8D, 0x54, 0x24, 0x08, 0x89, 0x44, 0x24, 0x10, 0x8B, 0x01,
                0x52, 0x50, 0xC7, 0x44, 0x24, 0x1C, 0x00, 0x00, 0x70, 0x41, 0xE8, 0xC1, 0x3E, 0x1C, 0x00, 0x83,
                0xC4, 0x08, 0x85, 0xC0, 0x0F, 0x84, 0xAF, 0x00, 0x00, 0x00, 0x8B, 0x47, 0x2C, 0x8B, 0x40, 0x18,
                0xC1, 0xE8, 0x12, 0x24, 0x07, 0x04, 0x04, 0x78, 0x09, 0x3C, 0x13, 0x7D, 0x05, 0xA2, 0x76, 0xDD,
                0x9D, 0x00, 0x53, 0x8A, 0x1D, 0x76, 0xDD, 0x9D, 0x00, 0x56, 0xBE, 0xB8, 0xD8, 0x9D, 0x00, 0xE8,
                0xEC, 0xFB, 0xF9, 0xFF, 0x0F, 0xBE, 0x87, 0xB8, 0x00, 0x00, 0x00, 0xB9, 0x20, 0x7D, 0xA7, 0x00,
                0x5E, 0x5B, 0x8B, 0x44, 0x81, 0x0C, 0x8B, 0x09, 0x50, 0x51, 0xE8, 0x70, 0x00, 0x00, 0x00, 0xC1,
                0xE5, 0x0B, 0x83, 0xC4, 0x08, 0x81, 0xE5, 0xFF, 0xFF, 0x00, 0x80, 0x79, 0x08, 0x4D, 0x81, 0xCD,
                0x00, 0x00, 0xFF, 0xFF, 0x45, 0x81, 0xE5, 0xFF, 0xFF, 0x00, 0x00, 0xD9, 0x04, 0xAD, 0x08, 0xEE,
                0x9D, 0x00, 0xD8, 0x05, 0x74, 0x9F, 0x78, 0x00, 0xD8, 0x0D, 0x54, 0x60, 0x74, 0x00, 0xE8, 0xCD,
                0x0A, 0x29, 0x00, 0xD1, 0xE8, 0x0F, 0xB6, 0x80, 0x78, 0x6F, 0x48, 0x00, 0xBA, 0x24, 0x7D, 0xA7,
                0x00, 0x8B, 0x44, 0x82, 0x20, 0x8B, 0x12, 0x50, 0x52, 0xE8, 0xF2, 0x68, 0x1E, 0x00, 0x8B, 0x87,
                0xE0, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x68, 0xF0, 0xC0, 0x42, 0x00, 0x50, 0xE8, 0x0F, 0x48, 0x1E,
                0x00, 0xE8, 0xBA, 0x47, 0x1E, 0x00, 0x83, 0xC4, 0x14, 0x5D, 0x5F, 0x83, 0xC4, 0x10, 0xC3, 0xFF,
                0x74, 0x24, 0x08, 0xFF, 0x74, 0x24, 0x08, 0xE8, 0xC4, 0x68, 0x1E, 0x00, 0x8B, 0x04, 0x24, 0x03,
                0x05, 0x7C, 0x18, 0x8E, 0x00, 0x8B, 0x00, 0x85, 0xC0, 0x89, 0x04, 0x24, 0x74, 0x22, 0xA1, 0xE4,
                0x77, 0xA7, 0x00, 0x8B, 0x40, 0x30, 0x83, 0xE0, 0x03, 0x0F, 0xB6, 0x80, 0x78, 0x6F, 0x48, 0x00,
                0x8B, 0x04, 0x85, 0x90, 0x7C, 0xA7, 0x00, 0x89, 0x44, 0x24, 0x04, 0xE8, 0x90, 0x68, 0x1E, 0x00,
                0x83, 0xC4, 0x08, 0xC3, 0xA1, 0xE4, 0x77, 0xA7, 0x00, 0x83, 0xEC, 0x1C, 0x57, 0x8B, 0xF9, 0x8A,
                0x48, 0x20, 0x84, 0xC9, 0x0F, 0x85, 0xD9, 0x01, 0x00, 0x00, 0x81, 0xBF, 0xE8, 0x00, 0x00, 0x00,
                0x00, 0x24, 0x74, 0xC9, 0x0F, 0x84, 0xC9, 0x01, 0x00, 0x00, 0x55, 0x8D, 0xAF, 0xE4, 0x00, 0x00,
                0x00, 0x68, 0x00, 0x40, 0x1C, 0x47, 0x68, 0x00, 0x00, 0x70, 0x41, 0x8B, 0xCD, 0xE8, 0x0E, 0x11,
                0x1A, 0x00, 0x83, 0xC4, 0x08, 0x85, 0xC0, 0x0F, 0x84, 0xA5, 0x01, 0x00, 0x00, 0x56, 0x8D, 0x4C,
                0x24, 0x18, 0x51, 0x6A, 0x0E, 0xE8, 0x26, 0x5C, 0x1C, 0x00, 0x6A, 0x00, 0x6A, 0x0E, 0xE8, 0xCD,
                0x5B, 0x1C, 0x00, 0xD9, 0x87, 0xC0, 0x00, 0x00, 0x00, 0xD8, 0xA7, 0xE8, 0x00, 0x00, 0x00, 0x83,
                0xC4, 0x10, 0xC7, 0x44, 0x24, 0x1C, 0x00, 0x00, 0xC8, 0x41, 0xC7, 0x44, 0x24, 0x20, 0x00, 0x00,
                0x80, 0x3F, 0xD8, 0x0D, 0x04, 0x5C, 0x74, 0x00, 0xC7, 0x44, 0x24, 0x24, 0x00, 0x00, 0x88, 0x41,
                0xD8, 0x2D, 0x74, 0x9F, 0x78, 0x00, 0xD9, 0x54, 0x24, 0x0C, 0xD8, 0x1D, 0x00, 0x62, 0x74, 0x00,
                0xDF, 0xE0, 0xF6, 0xC4, 0x41, 0x75, 0x26, 0x31, 0xF6, 0x46, 0xE8, 0x91, 0x48, 0x1B, 0x00, 0x8B,
                0x54, 0x24, 0x0C, 0x52, 0x8D, 0x44, 0x24, 0x20, 0x50, 0x8D, 0x87, 0xF0, 0x00, 0x00, 0x00, 0x55,
                0xE8, 0x6B, 0x49, 0x1B, 0x00, 0x83, 0xC4, 0x0C, 0xE8, 0x83, 0x4C, 0x1B, 0x00, 0x53, 0xB3, 0x10,
                0xBE, 0xB8, 0xD8, 0x9D, 0x00, 0x88, 0x1D, 0x76, 0xDD, 0x9D, 0x00, 0xE8, 0x40, 0xFA, 0xF9, 0xFF,
                0xA1, 0x1C, 0x7D, 0xA7, 0x00, 0x85, 0xC0, 0x5B, 0x0F, 0x84, 0xF4, 0x00, 0x00, 0x00, 0x8D, 0x4C,
                0x24, 0x10, 0x51, 0x6A, 0x0A, 0xE8, 0x86, 0x5B, 0x1C, 0x00, 0x8D, 0x54, 0x24, 0x1C, 0x52, 0x6A,
                0x0B, 0xE8, 0x7A, 0x5B, 0x1C, 0x00, 0x8D, 0x44, 0x24, 0x1C, 0x50, 0x6A, 0x14, 0xE8, 0x6E, 0x5B,
                0x1C, 0x00, 0x6A, 0x05, 0x6A, 0x0A, 0xE8, 0x15, 0x5B, 0x1C, 0x00, 0x6A, 0x02, 0x6A, 0x0B, 0xE8,
                0x0C, 0x5B, 0x1C, 0x00, 0x6A, 0x01, 0x6A, 0x14, 0xE8, 0x03, 0x5B, 0x1C, 0x00, 0x8B, 0x0D, 0x1C,
                0x7D, 0xA7, 0x00, 0x8B, 0x71, 0x04, 0x6A, 0x00, 0x68, 0x28, 0x2C, 0x75, 0x00, 0x56, 0xE8, 0x5D,
                0x57, 0x1C, 0x00, 0x8B, 0x97, 0xF4, 0x00, 0x00, 0x00, 0x6A, 0x02, 0x52, 0x68, 0xC8, 0x2E, 0x74,
                0x00, 0x56, 0xE8, 0x29, 0x59, 0x1C, 0x00, 0x8B, 0x87, 0xF0, 0x00, 0x00, 0x00, 0x83, 0xC4, 0x4C,
                0x6A, 0x02, 0x50, 0x68, 0xBC, 0x2E, 0x74, 0x00, 0x56, 0xE8, 0x12, 0x59, 0x1C, 0x00, 0x8B, 0x8F,
                0xF8, 0x00, 0x00, 0x00, 0x6A, 0x02, 0x51, 0x68, 0xD4, 0x2E, 0x74, 0x00, 0x56, 0xE8, 0xFE, 0x58,
                0x1C, 0x00, 0x6A, 0x02, 0x55, 0x56, 0xE8, 0x15, 0x57, 0x1C, 0x00, 0x8B, 0x0D, 0x28, 0x7D, 0xA7,
                0x00, 0x83, 0xC4, 0x2C, 0x85, 0xC9, 0x74, 0x18, 0x0F, 0xBE, 0x87, 0xB8, 0x00, 0x00, 0x00, 0x83,
                0xF8, 0x03, 0x77, 0x0C, 0x8D, 0x04, 0x85, 0xF4, 0xD1, 0x8D, 0x00, 0x8B, 0x10, 0x89, 0x51, 0x04,
                0xA1, 0x1C, 0x7D, 0xA7, 0x00, 0x50, 0xE8, 0xB5, 0x45, 0x1E, 0x00, 0x8B, 0x4C, 0x24, 0x10, 0x51,
                0x6A, 0x14, 0xE8, 0x69, 0x5A, 0x1C, 0x00, 0x8B, 0x54, 0x24, 0x1C, 0x52, 0x6A, 0x0A, 0xE8, 0x5D,
                0x5A, 0x1C, 0x00, 0x8B, 0x44, 0x24, 0x28, 0x50, 0x6A, 0x0B, 0xE8, 0x51, 0x5A, 0x1C, 0x00, 0x83,
                0xC4, 0x1C, 0x8B, 0x4C, 0x24, 0x18, 0x51, 0x6A, 0x0E, 0xE8, 0x42, 0x5A, 0x1C, 0x00, 0x83, 0xC4,
                0x08, 0x5E, 0x5D, 0x5F, 0x83, 0xC4, 0x1C, 0xC3, 0x00, 0x02, 0x01, 0x02, 0xCC, 0xCC, 0xCC, 0xCC
            };
            Memory.Instance.SafeWrite(0x486C30, SignalFlick1);
            byte[] SignalFlick2 = {
                0xE8, 0xAB, 0x1E, 0x02, 0x00
            };
            Memory.Instance.SafeWrite(0x464E8F, SignalFlick2);
            byte[] SignalFlick3 = {
                0xE8, 0xAC, 0x38, 0x01, 0x00
            };
            Memory.Instance.SafeWrite(0x47348E, SignalFlick3);
            byte[] SignalFlick4 = {
                0xE8, 0x61, 0xD9, 0x00, 0x00
            };
            Memory.Instance.SafeWrite(0x4793D9, SignalFlick4);
            byte[] SignalFlick5 = {
                0x84, 0x6D, 0x48, 0x00
            };
            Memory.Instance.SafeWrite(0x752C0C, SignalFlick5);

            // Leadership Crown
            /// Leadership Crown Texture is missing from the 2P Bobsled Race HUD.  (?, this exists in vanilla.. i dont understand wheres the need for this lol)
            byte[] BobCrown = {
                0x31, 0xD2, 0x89, 0x15, 0x04, 0x4C, 0xAA, 0x00,
                0x89, 0x15, 0x20, 0x4C, 0xAA, 0x00, 0xD9, 0x1D,
                0x48, 0x4C, 0xAA, 0x00, 0xD9, 0x05, 0x74, 0x9F,
                0x78, 0x00, 0xD9, 0x15, 0x3C, 0x4C, 0xAA, 0x00,
                0xD9, 0x15, 0x58, 0x4C, 0xAA, 0x00, 0xD9, 0xC9,
                0xD9, 0x1D, 0x4C, 0x4C, 0xAA, 0x00, 0x89, 0x15,
                0x08, 0x4C, 0xAA, 0x00, 0xD9, 0x15, 0x24, 0x4C,
                0xAA, 0x00, 0x89, 0x15, 0x40, 0x4C, 0xAA, 0x00,
                0xD9, 0x15, 0x5C, 0x4C, 0xAA, 0x00, 0xA3, 0x00,
                0x4C, 0xAA, 0x00, 0xD9, 0x15, 0xFC, 0x4B, 0xAA,
                0x00, 0xA3, 0x1C, 0x4C, 0xAA, 0x00, 0xD9, 0x15,
                0x18, 0x4C, 0xAA, 0x00, 0xA3, 0x38, 0x4C, 0xAA,
                0x00, 0xD9, 0x15, 0x34, 0x4C, 0xAA, 0x00, 0xA3,
                0x54, 0x4C, 0xAA, 0x00, 0xD9, 0x1D, 0x50, 0x4C,
                0xAA, 0x00, 0xE8, 0xB9, 0x59, 0x24, 0x00, 0x83,
                0xC4, 0x18, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC
            };
            Memory.Instance.SafeWrite(0x406FE0, BobCrown);

            // Sun Lens Flare Size
            /// Similar to the text on menu prompts and credits, the Lens Flare doesn't resize properly, causing the object to be smaller at bigger screen resolutions.
            //////   !!! WIP !!!

            // Stage Speed Cap
            /// Missing feature on PC, causing characters to go faster on loops.
            //////   !!! WIP !!!

            // Grand Metropolis Energy Pipes
            /// The game does not scan for the high quality object archive for the lava indirect effects.  (?, no idea what this changes actually lol)
            byte[] stg03Pipe1 = { 
                0xB0, 0x3B, 0x57, 0x00, 0xAD, 0x3C, 0x57, 0x00,
                0x62, 0x3B, 0x57, 0x00
            };
            Memory.Instance.SafeWrite(0x8DB12C, stg03Pipe1);
            byte[] stg03Pipe2 = {
                0x6A, 0xFF, 0x68, 0xEB, 0x7E, 0x71, 0x00, 0x64, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x50, 0x64, 0x89,
                0x25, 0x00, 0x00, 0x00, 0x00, 0x51, 0x8B, 0x15, 0x00, 0xEE, 0x9D, 0x00, 0xB9, 0xC0, 0x00, 0x00,
                0x00, 0xE8, 0xF8, 0x46, 0xEB, 0xFF, 0x31, 0xC9, 0x89, 0x04, 0x24, 0x85, 0xC0, 0x89, 0x4C, 0x24,
                0x0C, 0x74, 0x0C, 0x8B, 0x0D, 0xB4, 0x78, 0xA7, 0x00, 0x50, 0xE8, 0x34, 0x01, 0x00, 0x00, 0x8B,
                0x4C, 0x24, 0x04, 0x64, 0x89, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x83, 0xC4, 0x10, 0xC3, 0x83, 0xEC,
                0x20, 0xA1, 0x18, 0x67, 0x8D, 0x00, 0x85, 0xC0, 0x74, 0x02, 0x8B, 0x00, 0x50, 0x68, 0xF4, 0xE6,
                0x76, 0x00, 0x8D, 0x44, 0x24, 0x08, 0x50, 0xE8, 0xA5, 0x67, 0x10, 0x00, 0x68, 0x28, 0x3D, 0xA2,
                0x00, 0xE8, 0x0D, 0x00, 0x00, 0x00, 0x58, 0xE8, 0xBF, 0xFE, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x83,
                0xC4, 0x20, 0xC3, 0xA1, 0xB0, 0xD8, 0x9D, 0x00, 0x8B, 0x80, 0x1C, 0x8C, 0x00, 0x00, 0x83, 0xEC,
                0x20, 0x85, 0xC0, 0x0F, 0x84, 0xAE, 0x00, 0x00, 0x00, 0x53, 0x55, 0x56, 0x57, 0x50, 0xE8, 0x2B,
                0xA8, 0x0D, 0x00, 0x5B, 0xE8, 0xF5, 0xD8, 0x0C, 0x00, 0x8B, 0x15, 0x4C, 0x78, 0xA7, 0x00, 0x8B,
                0x82, 0x50, 0x0A, 0x00, 0x00, 0x8B, 0x6C, 0x24, 0x34, 0x55, 0xE8, 0xDF, 0xB4, 0xEB, 0xFF, 0xBF,
                0xD4, 0x42, 0x8B, 0x00, 0x31, 0xED, 0x83, 0xC5, 0x06, 0x8B, 0x47, 0x04, 0x50, 0x8D, 0x4C, 0x24,
                0x14, 0x68, 0x70, 0xE1, 0x76, 0x00, 0x51, 0xE8, 0x35, 0x67, 0x10, 0x00, 0x8B, 0x15, 0x4C, 0x78,
                0xA7, 0x00, 0x8B, 0xB2, 0x50, 0x0A, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x8D, 0x4C, 0x24, 0x10, 0x8B,
                0xC6, 0xE8, 0x28, 0xB6, 0xEB, 0xFF, 0x8B, 0xD8, 0x8B, 0x44, 0x24, 0x34, 0x50, 0x8B, 0xC6, 0xE8,
                0x9A, 0xB4, 0xEB, 0xFF, 0x85, 0xC0, 0x74, 0x21, 0x8B, 0x4E, 0x40, 0x56, 0x8B, 0xC3, 0xE8, 0xCB,
                0xB7, 0xEB, 0xFF, 0x85, 0xC0, 0x74, 0x12, 0x89, 0x07, 0x6A, 0x00, 0x68, 0xD0, 0x15, 0x64, 0x00,
                0x50, 0xE8, 0xB8, 0x78, 0x0F, 0x00, 0x83, 0xC4, 0x0C, 0x83, 0xC7, 0x0C, 0x4D, 0x75, 0x9A, 0xA1,
                0xB0, 0xD8, 0x9D, 0x00, 0x8B, 0x88, 0x1C, 0x8C, 0x00, 0x00, 0x51, 0xE8, 0x9E, 0xD8, 0x0C, 0x00,
                0x83, 0xC4, 0x04, 0x5F, 0x5E, 0x5D, 0x5B, 0x83, 0xC4, 0x20, 0xC3, 0x56, 0x57, 0xBE, 0xD4, 0x42,
                0x8B, 0x00, 0x31, 0xFF, 0x83, 0xC7, 0x06, 0x8B, 0x06, 0x85, 0xC0, 0x74, 0x0D, 0x50, 0xE8, 0x9B,
                0x7F, 0x0F, 0x00, 0x31, 0xC0, 0x83, 0xC4, 0x04, 0x89, 0x06, 0x83, 0xC6, 0x0C, 0x4F, 0x75, 0xE7,
                0x5F, 0x5E, 0xC3, 0x64, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x6A, 0xFF, 0x68, 0x7E, 0x8C, 0x71, 0x00,
                0x50, 0x64, 0x89, 0x25, 0x00, 0x00, 0x00, 0x00, 0x53, 0x55, 0x56, 0x57, 0x8B, 0x7C, 0x24, 0x20,
                0x8B, 0xC7, 0xE8, 0x67, 0xF5, 0xEC, 0xFF, 0x31, 0xDB, 0x8D, 0x47, 0x28, 0x89, 0x5C, 0x24, 0x18,
                0xE8, 0x19, 0xA3, 0xEC, 0xFF, 0x8D, 0x77, 0x30, 0x31, 0xC9, 0x41, 0x89, 0x5E, 0x10, 0x66, 0x89,
                0x5E, 0x08, 0x66, 0x89, 0x5E, 0x02, 0x66, 0x89, 0x5E, 0x0A, 0x66, 0x89, 0x4E, 0x04, 0x66, 0x89,
                0x4E, 0x06, 0x89, 0x5E, 0x78, 0xC6, 0x44, 0x24, 0x18, 0x02, 0x8B, 0x0D, 0x60, 0x43, 0x8B, 0x00,
                0xBD, 0x60, 0xD8, 0x77, 0x00, 0x89, 0x28, 0x83, 0xC5, 0x04, 0x8B, 0x47, 0x2C, 0x89, 0x2F, 0x8B,
                0x68, 0x2C, 0x89, 0x4F, 0x04, 0x66, 0xC7, 0x47, 0x1E, 0xC0, 0x00, 0x8A, 0x45, 0x00, 0x38, 0xD8,
                0x7C, 0x04, 0x3C, 0x04, 0x7C, 0x03, 0x88, 0x5D, 0x00, 0x8B, 0xDF, 0xE8, 0x4E, 0x03, 0x00, 0x00,
                0xE8, 0x29, 0x02, 0x00, 0x00, 0x8B, 0x15, 0x4C, 0x0A, 0x8E, 0x00, 0x6A, 0x30, 0xFF, 0x92, 0x34,
                0x01, 0x00, 0x00, 0x8B, 0xD8, 0x83, 0xC4, 0x04, 0x85, 0xDB, 0x74, 0x30, 0x6A, 0x30, 0x68, 0x30,
                0x43, 0x8B, 0x00, 0x53, 0xE8, 0x45, 0x66, 0x10, 0x00, 0x80, 0x4E, 0x09, 0x80, 0x83, 0xC4, 0x0C,
                0x8B, 0xCE, 0x89, 0x5E, 0x10, 0x66, 0xC7, 0x06, 0x04, 0x00, 0x66, 0xC7, 0x46, 0x0A, 0x01, 0x00,
                0xE8, 0x99, 0x37, 0xE9, 0xFF, 0x8B, 0xDE, 0xE8, 0x72, 0x09, 0xEA, 0xFF, 0x8B, 0x47, 0x40, 0x85,
                0xC0, 0x74, 0x22, 0xD9, 0x45, 0x04, 0x8B, 0xDE, 0xD8, 0x48, 0x14, 0xD9, 0x58, 0x14, 0xD9, 0x45,
                0x08, 0xD8, 0x48, 0x18, 0xD9, 0x58, 0x18, 0xD9, 0x45, 0x0C, 0xD8, 0x48, 0x1C, 0xD9, 0x58, 0x1C,
                0xE8, 0x49, 0x09, 0xEA, 0xFF, 0x8B, 0x4C, 0x24, 0x10, 0x8B, 0xC7, 0x5F, 0x5E, 0x5D, 0x64, 0x89,
                0x0D, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x83, 0xC4, 0x0C, 0xC2, 0x04, 0x00, 0xCC, 0xCC
            };
            Memory.Instance.SafeWrite(0x573B62, stg03Pipe2);
            byte[] stg03Pipe3 = {
                0x8B, 0x48, 0x40, 0x8B, 0x91, 0xE0, 0x00, 0x00, 0x00,
                0x39, 0xC2, 0x75, 0x0B, 0x8B, 0x50, 0x3C, 0x89, 0x91,
                0xE0, 0x00, 0x00, 0x00, 0xEB, 0x1B, 0x8D, 0x4A, 0x3C,
                0x56, 0x39, 0x01, 0x74, 0x0C, 0x8B, 0x11, 0x8B, 0x72,
                0x3C, 0x39, 0xC6, 0x8D, 0x4A, 0x3C, 0x75, 0xF4, 0x8B,
                0x48, 0x3C, 0x89, 0x4A, 0x3C, 0x5E, 0x31, 0xD2, 0xC7,
                0x40, 0x3C, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x66, 0x81,
                0x3D, 0x2C, 0x51, 0xAA, 0x00, 0x01, 0x01, 0x72, 0xF4,
                0xE9, 0x38, 0x01, 0x00, 0x00
            };
            Memory.Instance.SafeWrite(0x573A60, stg03Pipe3);

            // Grand Metropolis Pipe Glass
            /// Can be seen through walls, caused by an incorrect material flag.  (?, no idea what this changes actually lol)
            byte[] stg03PipeGlass = {
                0xA4
            };
            Memory.Instance.SafeWrite(0x574130, stg03PipeGlass);

            // Power Plant Transparency issues
            /// No use of transparency on the stage (more specifically the green arrows and the Eggman's symbol on the caps)
            //////   !!! WIP !!!   (WORK AROUND - i edited the textures so the black parts wouldnt show up)

            // Power Plant Steps
            /// Steps from the Storage Tank don't have their flicker effect.
            //////   !!! WIP !!!

            // Frog Forest Root Ball
            /// The vertex paint disappears from the model.  (?, no idea what this changes actually lol)
            byte[] stg09RootBall = {
                0x60
            };
            Memory.Instance.SafeWrite(0x4DDC4B, stg09RootBall);

            // Transparent Frog feet
            /// The frog's feet in Frog Forest and Lost Jungle are see-through when in deep touch with geometry.
            /////   !!! BROKEN, NEEDS BETTER CODE !!!
            /// byte[] stg09FrogFeet1 = {
            ///    0xC7, 0x05, 0xE4, 0xAB, 0x7B,
            ///    0x00, 0x70, 0x2E, 0x40, 0x00
            /// };
            /// Memory.Instance.SafeWrite(0x4EE3ED, stg09FrogFeet1);
            /// byte[] stg09FrogFeet2 = {
            /// 0x12
            /// };
            /// Memory.Instance.SafeWrite(0x868A20, stg09FrogFeet2);
            /// byte[] stg09FrogFeet3 = {
            /// 0x12
            /// };
            /// Memory.Instance.SafeWrite(0x868A44, stg09FrogFeet3);

            // Final Fortress UFO Sign light
            /// Fading light arrow animations are missing. (yet does not affect Egg Fleet's UFO!)
            byte[] stg14UFO1 = {
                0x83, 0xEC, 0x08, 0xA1, 0x64, 0x34, 0xAA, 0x00,
                0x56, 0x8B, 0xF1, 0x8B, 0x4E, 0x2C, 0x89, 0x44,
                0x24, 0x04, 0x8B, 0x41, 0x18, 0xF6, 0xC4, 0x04,
                0x75, 0x29, 0x0F, 0xB6, 0x51, 0x2B, 0x42, 0x89,
                0x54, 0x24, 0x08, 0x51, 0xDB, 0x44, 0x24, 0x0C,
                0xD8, 0x0D, 0x28, 0xA0, 0x78, 0x00, 0xD9, 0xC0,
                0xD8, 0xC9, 0xD9, 0x1C, 0x24, 0xDD, 0xD8, 0xE8,
                0x64, 0xA5, 0xF1, 0xFF, 0x83, 0xC4, 0x04, 0x85,
                0xC0, 0x75, 0x76, 0x8B, 0x56, 0x2C, 0xF6, 0x42,
                0x18, 0x04, 0x75, 0x6D, 0xA1, 0xE4, 0x77, 0xA7,
                0x00, 0x8A, 0x48, 0x1F, 0x84, 0xC9, 0x74, 0x08,
                0x8D, 0x46, 0x30, 0x8D, 0x4A, 0x0C, 0xEB, 0x50,
                0x81, 0xC6, 0xB8, 0x00, 0x00, 0x00, 0xD9, 0x06,
                0xD8, 0x05, 0xDC, 0xA0, 0x78, 0x00, 0xD8, 0x54,
                0x24, 0x04, 0xDF, 0xE0, 0xF6, 0xC4, 0x01, 0x75,
                0x04, 0xD8, 0x64, 0x24, 0x04, 0xD9, 0x1E, 0x8B,
                0x0E, 0x57, 0x8B, 0x7E, 0x04, 0x51, 0xE8, 0x85,
                0xE2, 0xFE, 0xFF, 0xA1, 0x48, 0x86, 0xA7, 0x00,
                0x83, 0xC4, 0x04, 0x85, 0xC0, 0x5F, 0x74, 0x09,
                0x50, 0x8B, 0x46, 0x08, 0xE8, 0x21, 0x00, 0x00,
                0x00, 0x81, 0xEE, 0xB8, 0x00, 0x00, 0x00, 0x8B,
                0x56, 0x2C, 0x8D, 0x46, 0x30, 0x8D, 0x4A, 0x0C,
                0x5E, 0x83, 0xC4, 0x08, 0xE9, 0x47, 0x55, 0xF3,
                0xFF, 0x80, 0x4E, 0x08, 0x01, 0x5E, 0x83, 0xC4,
                0x08, 0xC3, 0x6A, 0x00, 0x68, 0x41, 0x3F, 0x52,
                0x00, 0x50, 0xE8, 0x61, 0x78, 0x14, 0x00, 0xFF,
                0x74, 0x24, 0x10, 0xE8, 0x48, 0x03, 0x00, 0x00,
                0x83, 0xC4, 0x0C, 0xC2, 0x04, 0x00
            };
            Memory.Instance.SafeWrite(0x523C10, stg14UFO1);
            byte[] stg14UFO2 = {
                0x8B, 0x40, 0x18, 0x6A, 0x08, 0x50, 0xE8, 0x04,
                0xAD, 0x14, 0x00, 0x83, 0xC4, 0x08, 0xC3
            };
            Memory.Instance.SafeWrite(0x523F41, stg14UFO2);

            // Final Fortress Laser Beam Indirect Effects
            /// Similar Effect that can be found on the GameCube port.
            byte[] stg14LaserC1 = {
                0x50
            };
            Memory.Instance.SafeWrite(0x71A800, stg14LaserC1);
            byte[] stg14LaserC2 = {
                0x50
            };
            Memory.Instance.SafeWrite(0x71A950, stg14LaserC2);
            byte[] stg14LaserC3 = {
                0x50
            };
            Memory.Instance.SafeWrite(0x71AAA0, stg14LaserC3);
            byte[] stg14LaserC4 = {
                0x50
            };
            Memory.Instance.SafeWrite(0x71AB79, stg14LaserC4);

            // Final Fortress Laser Beam Disabled Backface Culling
            /// Backface Culling is rendered as 'front' instead of 'none', making the laser beam a bit incomplete.
            //////   !!! WIP !!!   (WORK AROUND - i flipped normals so it would display the head, yet it would be better without any model edits personally, and having both sides showing)

            // Final Fortress Laser Beam Effect Display
            /// An effect that should appear before and during the laser beam activation, which is not rendered correctly.
            //////   !!! WIP !!!

            // Boss Defeat Explosion
            /// Explosion particles are missing when defeating a boss (Egg Hawk and Egg Albatoross), present on the GameCube port.
            //////   !!! WIP !!!

            // No Exit Prompt
            ///! Kell is a God.
            Config_Exit(_configuration.Exit);

            //!
        }

        // Unfrozen Title Screen
        private void Config_TitleScr(bool enabled)
        {
            if (enabled)
            {
                byte[] TitleScr1 = {
                    0xA1, 0x30, 0x49, 0xAA, 0x00, 0x83, 0xF8, 0xFE, 0xB9, 0x03, 0x00, 0x00, 0x00, 0x89, 0x4F, 0x2C,
                    0x5E, 0x7C, 0x0B, 0x83, 0xF8, 0x63, 0x7D, 0x06, 0x83, 0xF8, 0xFE, 0x75, 0x01, 0x41, 0x8B, 0x87,
                    0x84, 0x00, 0x00, 0x00, 0x40, 0x89, 0x4F, 0x40, 0xC7, 0x47, 0x48, 0x01, 0x00, 0x00, 0x00, 0x89,
                    0x4F, 0x2C, 0x89, 0x87, 0x84, 0x00, 0x00, 0x00, 0x5B, 0x59, 0xC3, 0x83, 0xF8, 0x03, 0x75, 0x0A,
                    0xD9, 0x41, 0x34, 0xD9, 0xE8, 0xDE, 0xC1, 0xD9, 0x59, 0x34, 0x83, 0xE8, 0x05, 0x0F, 0x84, 0x20,
                    0xFE, 0xFF, 0xFF, 0xE9, 0xEF, 0xFD, 0xFF, 0xFF
                };
                Memory.Instance.SafeWrite(0x4569F1, TitleScr1);
                byte[] TitleScr2 = {
                    0xE9, 0xF4, 0x01, 0x00, 0x00
                };
                Memory.Instance.SafeWrite(0x456833, TitleScr2);
            }
            else
            {
                /// Revert
            }
        }

        // Demo Gameplay
        private void Config_DemoMode(bool enabled)
        {
            if (enabled)
            {
                byte[] DemoMode = {
                0x80, 0xF9, 0x06, 0x0F, 0x4D, 0xCB
                };
                Memory.Instance.SafeWrite(0x45698A, DemoMode);
            }
            else
            {
                /// Revert
            }
        }

        // No Exit Prompt
        private void Config_Exit(bool enabled)
        {
            if (enabled)
            {
                byte[] Exit = {
                0xE9, 0xF1, 0x00, 0x00, 0x00
                };
                Memory.Instance.SafeWrite(0x446EFB, Exit);
            }
            else
            {
                /// Revert
            }
        }

        #region Standard Overrides
        public override void ConfigurationUpdated(Config configuration)
        {
            if (_configuration.TitleScr != configuration.TitleScr)
                Config_TitleScr(configuration.TitleScr);

            if (_configuration.DemoMode != configuration.DemoMode)
                Config_DemoMode(configuration.DemoMode);

            if (_configuration.Exit != configuration.Exit)
                Config_DemoMode(configuration.Exit);

            _configuration = configuration;
            _logger.WriteLine($"SH Fixed Edition configuration updated: Please restart the game for the changes to take effect.");
        }
        #endregion

        #region For Exports, Serialization etc.
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Mod() { }
#pragma warning restore CS8618
        #endregion
    }
}